// Code generated by MockGen. DO NOT EDIT.
// Source: zntr.io/vaultify/logical (interfaces: Logical)

// Package logical is a generated GoMock package.
package logical

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/vault/api"
)

// MockLogical is a mock of Logical interface.
type MockLogical struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalMockRecorder
}

// MockLogicalMockRecorder is the mock recorder for MockLogical.
type MockLogicalMockRecorder struct {
	mock *MockLogical
}

// NewMockLogical creates a new mock instance.
func NewMockLogical(ctrl *gomock.Controller) *MockLogical {
	mock := &MockLogical{ctrl: ctrl}
	mock.recorder = &MockLogicalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogical) EXPECT() *MockLogicalMockRecorder {
	return m.recorder
}

// DeleteWithContext mocks base method.
func (m *MockLogical) DeleteWithContext(arg0 context.Context, arg1 string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWithContext", arg0, arg1)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithContext indicates an expected call of DeleteWithContext.
func (mr *MockLogicalMockRecorder) DeleteWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithContext", reflect.TypeOf((*MockLogical)(nil).DeleteWithContext), arg0, arg1)
}

// DeleteWithDataWithContext mocks base method.
func (m *MockLogical) DeleteWithDataWithContext(arg0 context.Context, arg1 string, arg2 map[string][]string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWithDataWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithDataWithContext indicates an expected call of DeleteWithDataWithContext.
func (mr *MockLogicalMockRecorder) DeleteWithDataWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithDataWithContext", reflect.TypeOf((*MockLogical)(nil).DeleteWithDataWithContext), arg0, arg1, arg2)
}

// ListWithContext mocks base method.
func (m *MockLogical) ListWithContext(arg0 context.Context, arg1 string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithContext", arg0, arg1)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithContext indicates an expected call of ListWithContext.
func (mr *MockLogicalMockRecorder) ListWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithContext", reflect.TypeOf((*MockLogical)(nil).ListWithContext), arg0, arg1)
}

// ReadWithContext mocks base method.
func (m *MockLogical) ReadWithContext(arg0 context.Context, arg1 string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithContext", arg0, arg1)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithContext indicates an expected call of ReadWithContext.
func (mr *MockLogicalMockRecorder) ReadWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithContext", reflect.TypeOf((*MockLogical)(nil).ReadWithContext), arg0, arg1)
}

// ReadWithDataWithContext mocks base method.
func (m *MockLogical) ReadWithDataWithContext(arg0 context.Context, arg1 string, arg2 map[string][]string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithDataWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithDataWithContext indicates an expected call of ReadWithDataWithContext.
func (mr *MockLogicalMockRecorder) ReadWithDataWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithDataWithContext", reflect.TypeOf((*MockLogical)(nil).ReadWithDataWithContext), arg0, arg1, arg2)
}

// UnwrapWithContext mocks base method.
func (m *MockLogical) UnwrapWithContext(arg0 context.Context, arg1 string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnwrapWithContext", arg0, arg1)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnwrapWithContext indicates an expected call of UnwrapWithContext.
func (mr *MockLogicalMockRecorder) UnwrapWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnwrapWithContext", reflect.TypeOf((*MockLogical)(nil).UnwrapWithContext), arg0, arg1)
}

// WriteBytesWithContext mocks base method.
func (m *MockLogical) WriteBytesWithContext(arg0 context.Context, arg1 string, arg2 []byte) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBytesWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteBytesWithContext indicates an expected call of WriteBytesWithContext.
func (mr *MockLogicalMockRecorder) WriteBytesWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBytesWithContext", reflect.TypeOf((*MockLogical)(nil).WriteBytesWithContext), arg0, arg1, arg2)
}

// WriteWithContext mocks base method.
func (m *MockLogical) WriteWithContext(arg0 context.Context, arg1 string, arg2 map[string]interface{}) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteWithContext indicates an expected call of WriteWithContext.
func (mr *MockLogicalMockRecorder) WriteWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteWithContext", reflect.TypeOf((*MockLogical)(nil).WriteWithContext), arg0, arg1, arg2)
}
